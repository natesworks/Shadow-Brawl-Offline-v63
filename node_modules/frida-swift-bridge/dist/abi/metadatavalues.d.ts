export declare const NumWords_ValueBuffer = 3;
export declare class TargetValueWitnessFlags {
    data: number;
    constructor(data: number);
    get isInlineStorage(): boolean;
    get isPOD(): boolean;
    get isBitwiseTakable(): boolean;
    getAlignmentMask(): number;
}
export declare enum MetadataKind {
    Class = 0,
    Struct = 512,
    Enum = 513,
    LastEnumerated = 2047
}
export declare function getEnumeratedMetadataKind(kind: MetadataKind): MetadataKind;
export declare enum ContextDescriptorKind {
    Module = 0,
    Extension = 1,
    Anonymous = 2,
    Protocol = 3,
    OpaqueType = 4,
    TypeFirst = 16,
    Class = 16,
    Struct = 17,
    Enum = 18
}
declare enum TypeContextDescriptorFlags_Values {
    MetadataInitialization = 0,
    MetadataInitialization_width = 2,
    Class_ResilientSuperclassReferenceKind = 9,
    Class_HasResilientSuperclass = 13,
    Class_HasOverrideTable = 14,
    Class_HasVTable = 15
}
declare enum MetadataInitializationKind {
    NoMetadataInitialization = 0,
    SingletonMetadataInitialization = 1,
    ForeignMetadataInitialization = 2
}
export declare class TypeContextDescriptorFlags {
    private value;
    constructor(value: TypeContextDescriptorFlags_Values);
    class_hasVTable(): boolean;
    class_hasResilientSuperClass(): boolean;
    class_hasOverrideTable(): boolean;
    getMetadataInitialization(): MetadataInitializationKind;
    hasSingletonMetadataInitialization(): boolean;
    hasForeignMetadataInitialization(): boolean;
}
export declare enum MethodDescriptorKind {
    Method = 0,
    Init = 1,
    Getter = 2,
    Setter = 3,
    ModifyCoroutine = 4,
    ReadCoroutine = 5
}
export declare class MethodDescriptorFlags {
    readonly value: number;
    private static readonly KindMask;
    constructor(value: number);
    getKind(): MethodDescriptorKind;
}
export declare enum TypeReferenceKind {
    DirectTypeDescriptor = 0,
    IndirectTypeDescriptor = 1,
    DirectObjCClassName = 2,
    IndirectObjCClass = 3
}
export declare class ConformanceFlags {
    private value;
    constructor(value: number);
    getTypeReferenceKind(): TypeReferenceKind;
}
export declare class ProtocolClassConstraint {
    static readonly Class = false;
    static readonly Any = true;
}
export declare class ProtocolContextDescriptorFlags {
    private bits;
    constructor(bits: number);
    getClassConstraint(): ProtocolClassConstraint;
}
export {};
