import { RelativeDirectPointer } from "../basic/relativepointer.js";
export class FieldDescriptor {
    handle;
    static SIZE = 16;
    static OFFSETOF_NUMFIELDS = 0x0c;
    #numFields;
    constructor(handle) {
        this.handle = handle;
    }
    getFieldRecordBuffer() {
        return this.handle.add(FieldDescriptor.SIZE);
    }
    get numFields() {
        if (this.#numFields !== undefined) {
            return this.#numFields;
        }
        this.#numFields = this.handle
            .add(FieldDescriptor.OFFSETOF_NUMFIELDS)
            .readU32();
        return this.#numFields;
    }
    getFields() {
        const result = [];
        let cursor = this.getFieldRecordBuffer();
        let record;
        for (let i = 0; i < this.numFields; i++) {
            record = new FieldRecord(cursor);
            result.push(record);
            cursor = cursor.add(FieldRecord.SIZE);
        }
        return result;
    }
}
class FieldRecord {
    handle;
    static SIZE = 12;
    static OFFSETOF_FLAGS = 0x0;
    static OFFSETOF_MANGLED_TYPE_NAME = 0x4;
    static OFFSETOF_FIELD_NAME = 0x8;
    #flags;
    #mangledTypeName;
    #fieldName;
    constructor(handle) {
        this.handle = handle;
    }
    get flags() {
        if (this.#flags !== undefined) {
            return this.#flags;
        }
        this.#flags = this.handle.add(FieldRecord.OFFSETOF_FLAGS).readU32();
        return this.#flags;
    }
    get mangledTypeName() {
        if (this.#mangledTypeName !== undefined) {
            return this.#mangledTypeName;
        }
        this.#mangledTypeName = RelativeDirectPointer.From(this.handle.add(FieldRecord.OFFSETOF_MANGLED_TYPE_NAME));
        return this.#mangledTypeName;
    }
    get fieldName() {
        if (this.#fieldName !== undefined) {
            return this.#fieldName;
        }
        this.#fieldName = RelativeDirectPointer.From(this.handle.add(FieldRecord.OFFSETOF_FIELD_NAME))
            .get()
            .readUtf8String();
        return this.#fieldName;
    }
    get isIndirectCase() {
        return !!(this.flags & FieldRecordFlags.IsIndirectCase);
    }
    get isVar() {
        return !!(this.flags & FieldRecordFlags.IsVar);
    }
}
var FieldRecordFlags;
(function (FieldRecordFlags) {
    FieldRecordFlags[FieldRecordFlags["IsIndirectCase"] = 1] = "IsIndirectCase";
    FieldRecordFlags[FieldRecordFlags["IsVar"] = 2] = "IsVar";
})(FieldRecordFlags || (FieldRecordFlags = {}));
