import { ContextDescriptorKind } from "../abi/metadatavalues.js";
import { getAllFullTypeData, getAllProtocolDescriptors } from "./macho.js";
import { Class, Enum, Protocol, Struct } from "./types.js";
export class Registry {
    static sharedInstance;
    modules = {};
    classes = {};
    structs = {};
    enums = {};
    protocols = {};
    cachedTypes = {};
    static shared() {
        if (Registry.sharedInstance === undefined) {
            Registry.sharedInstance = new Registry();
        }
        return Registry.sharedInstance;
    }
    constructor() {
        for (const fullTypeData of getAllFullTypeData()) {
            const descriptor = fullTypeData.descriptor;
            const conformances = fullTypeData.conformances;
            switch (fullTypeData.descriptor.getKind()) {
                case ContextDescriptorKind.Class: {
                    const klass = new Class(descriptor, conformances);
                    this.classes[klass.$name] = klass;
                    this.getModule(klass.$moduleName).addClass(klass);
                    break;
                }
                case ContextDescriptorKind.Struct: {
                    const struct = new Struct(descriptor, conformances);
                    this.structs[struct.$name] = struct;
                    this.getModule(struct.$moduleName).addStruct(struct);
                    break;
                }
                case ContextDescriptorKind.Enum: {
                    const anEnum = new Enum(descriptor, conformances);
                    this.enums[anEnum.$name] = anEnum;
                    this.getModule(anEnum.$moduleName).addEnum(anEnum);
                    break;
                }
            }
        }
        for (const protoDesc of getAllProtocolDescriptors()) {
            const proto = new Protocol(protoDesc);
            this.protocols[protoDesc.name] = proto;
            this.getModule(proto.moduleName).addProtocol(proto);
        }
    }
    getModule(name) {
        if (name in this.modules) {
            return this.modules[name];
        }
        const module = new SwiftModule(name);
        this.modules[name] = module;
        return module;
    }
}
export class SwiftModule {
    name;
    classes = {};
    structs = {};
    enums = {};
    protocols = {};
    constructor(name) {
        this.name = name;
    }
    addClass(klass) {
        this.classes[klass.$name] = klass;
    }
    addStruct(struct) {
        this.structs[struct.$name] = struct;
    }
    addEnum(anEnum) {
        this.enums[anEnum.$name] = anEnum;
    }
    addProtocol(protocol) {
        this.protocols[protocol.name] = protocol;
    }
    toJSON() {
        return {
            classes: Object.keys(this.classes).length,
            structs: Object.keys(this.structs).length,
            enums: Object.keys(this.enums).length,
            protocols: Object.keys(this.protocols).length,
        };
    }
}
