/**
 * TODO:
 *  - Move to registry.ts
 */
export interface SimpleSymbolDetails {
    address: string;
    name?: string;
}
type CSSymbolicator = [NativePointer, NativePointer];
export declare function demangledSymbolFromAddress(address: NativePointer): string;
export declare function tryDemangleSymbol(name: string): string;
interface MethodSignatureParseResult {
    methodName: string;
    argNames: string[];
    argTypeNames: string[];
    retTypeName: string;
    jsSignature: string;
}
/**
 * @returns undefined for methods it (willingly, for now) fails to parse, e.g. (extension in Foundation):__C.NSTimer.TimerPublisher.__allocating_init(interval: Swift.Double, tolerance: Swift.Optional<Swift.Double>, runLoop: __C.NSRunLoop, mode: __C.NSRunLoopMode, options: Swift.Optional<(extension in Foundation):__C.NSRunLoop.SchedulerOptions>) -> (extension in Foundation):__C.NSTimer.TimerPublisher
 */
export declare function parseSwiftMethodSignature(signature: string): MethodSignatureParseResult;
export declare function tryParseSwiftMethodSignature(signature: string): MethodSignatureParseResult;
interface AccessorSignatureParseResult {
    accessorType: "getter" | "setter";
    memberName: string;
    memberTypeName: string;
}
export declare function parseSwiftAccessorSignature(signature: string): AccessorSignatureParseResult;
export declare function tryParseSwiftAccessorSignature(signature: string): AccessorSignatureParseResult;
export declare function getSymbolicator(): CSSymbolicator;
export declare function findProtocolNameInConformanceDescriptor(conformance: string): string | null;
export {};
