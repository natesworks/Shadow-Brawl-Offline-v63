import { Class, Enum, Protocol, Struct, Type } from "./types.js";
export type TypeMap = Record<string, Type>;
export type ClassMap = Record<string, Class>;
export type StructMap = Record<string, Struct>;
export type EnumMap = Record<string, Enum>;
export type ProtocolMap = Record<string, Protocol>;
export declare class Registry {
    private static sharedInstance;
    readonly modules: Record<string, SwiftModule>;
    readonly classes: ClassMap;
    readonly structs: StructMap;
    readonly enums: EnumMap;
    readonly protocols: ProtocolMap;
    readonly cachedTypes: TypeMap;
    static shared(): Registry;
    private constructor();
    private getModule;
}
export declare class SwiftModule {
    readonly name: string;
    readonly classes: ClassMap;
    readonly structs: StructMap;
    readonly enums: EnumMap;
    readonly protocols: ProtocolMap;
    constructor(name: string);
    addClass(klass: Class): void;
    addStruct(struct: Struct): void;
    addEnum(anEnum: Enum): void;
    addProtocol(protocol: Protocol): void;
    toJSON(): Record<string, number>;
}
