class GameModeVariationsParser {
    static Data: any[] = [];

    static Init(csvData: any[]) {
        GameModeVariationsParser.Data = csvData;
    }
    static GetName() { return GameModeVariationsParser.Data.map(row => row['Name']); }
    static GetVariation() { return GameModeVariationsParser.Data.map(row => row['Variation']); }
    static GetDisabled() { return GameModeVariationsParser.Data.map(row => row['Disabled']); }
    static GetShortname() { return GameModeVariationsParser.Data.map(row => row['ShortName']); }
    static GetTid() { return GameModeVariationsParser.Data.map(row => row['TID']); }
    static GetChatsuggestionitemname() { return GameModeVariationsParser.Data.map(row => row['ChatSuggestionItemName']); }
    static GetGamemoderoomiconname() { return GameModeVariationsParser.Data.map(row => row['GameModeRoomIconName']); }
    static GetGamemodeiconname() { return GameModeVariationsParser.Data.map(row => row['GameModeIconName']); }
    static GetBanneroverrideswf() { return GameModeVariationsParser.Data.map(row => row['BannerOverrideSWF']); }
    static GetBanneroverrideexportname() { return GameModeVariationsParser.Data.map(row => row['BannerOverrideExportName']); }
    static GetSquarebanneroverrideswf() { return GameModeVariationsParser.Data.map(row => row['SquareBannerOverrideSWF']); }
    static GetSquarebanneroverrideexportname() { return GameModeVariationsParser.Data.map(row => row['SquareBannerOverrideExportName']); }
    static GetMaxscore() { return GameModeVariationsParser.Data.map(row => row['MaxScore']); }
    static GetScoresfx() { return GameModeVariationsParser.Data.map(row => row['ScoreSfx']); }
    static GetOpponentscoresfx() { return GameModeVariationsParser.Data.map(row => row['OpponentScoreSfx']); }
    static GetScoretext() { return GameModeVariationsParser.Data.map(row => row['ScoreText']); }
    static GetScoreopponenttext() { return GameModeVariationsParser.Data.map(row => row['ScoreOpponentText']); }
    static GetScoretextend() { return GameModeVariationsParser.Data.map(row => row['ScoreTextEnd']); }
    static GetScoreopponenttextend() { return GameModeVariationsParser.Data.map(row => row['ScoreOpponentTextEnd']); }
    static GetScorevo() { return GameModeVariationsParser.Data.map(row => row['ScoreVO']); }
    static GetOpponentscorevo() { return GameModeVariationsParser.Data.map(row => row['OpponentScoreVO']); }
    static GetVictoryvo() { return GameModeVariationsParser.Data.map(row => row['VictoryVO']); }
    static GetDefeatvo() { return GameModeVariationsParser.Data.map(row => row['DefeatVO']); }
    static GetDoubletakedownvo() { return GameModeVariationsParser.Data.map(row => row['DoubleTakedownVO']); }
    static GetTripletakedownvo() { return GameModeVariationsParser.Data.map(row => row['TripleTakedownVO']); }
    static GetQuadtakedownvo() { return GameModeVariationsParser.Data.map(row => row['QuadTakedownVO']); }
    static GetTeamtakedownvo() { return GameModeVariationsParser.Data.map(row => row['TeamTakedownVO']); }
    static GetFirstbloodvo() { return GameModeVariationsParser.Data.map(row => row['FirstBloodVO']); }
    static GetPointsleftmediumvo() { return GameModeVariationsParser.Data.map(row => row['PointsLeftMediumVO']); }
    static GetPointsleftlowvo() { return GameModeVariationsParser.Data.map(row => row['PointsLeftLowVO']); }
    static GetFriendlymenuorder() { return GameModeVariationsParser.Data.map(row => row['FriendlyMenuOrder']); }
    static GetIntrotext() { return GameModeVariationsParser.Data.map(row => row['IntroText']); }
    static GetIntrodesctext() { return GameModeVariationsParser.Data.map(row => row['IntroDescText']); }
    static GetIntrodesctext2() { return GameModeVariationsParser.Data.map(row => row['IntroDescText2']); }
    static GetOvertimetext() { return GameModeVariationsParser.Data.map(row => row['OvertimeText']); }
    static GetOvertimevo() { return GameModeVariationsParser.Data.map(row => row['OvertimeVO']); }
    static GetPlayercountinfo() { return GameModeVariationsParser.Data.map(row => row['PlayerCountInfo']); }
    static GetStartnotification() { return GameModeVariationsParser.Data.map(row => row['StartNotification']); }
    static GetEndnotification() { return GameModeVariationsParser.Data.map(row => row['EndNotification']); }
    static GetColor() { return GameModeVariationsParser.Data.map(row => row['Color']); }
    static GetBgcolor() { return GameModeVariationsParser.Data.map(row => row['BgColor']); }
    static GetFallbackplayermapenvironment() { return GameModeVariationsParser.Data.map(row => row['FallbackPlayerMapEnvironment']); }
    static GetTeamentryitemname() { return GameModeVariationsParser.Data.map(row => row['TeamEntryItemName']); }
    static GetPanelteamonlinename() { return GameModeVariationsParser.Data.map(row => row['PanelTeamOnlineName']); }
    static GetSpecificemote1() { return GameModeVariationsParser.Data.map(row => row['SpecificEmote1']); }
    static GetSpecificemote2() { return GameModeVariationsParser.Data.map(row => row['SpecificEmote2']); }
    static GetSpecificemote3() { return GameModeVariationsParser.Data.map(row => row['SpecificEmote3']); }
    static GetScorepaneliconframe() { return GameModeVariationsParser.Data.map(row => row['ScorePanelIconFrame']); }
    static GetHasmodespecificquest() { return GameModeVariationsParser.Data.map(row => row['HasModeSpecificQuest']); }
    static GetMaxdamage() { return GameModeVariationsParser.Data.map(row => row['MaxDamage']); }
    static GetMaxhealing() { return GameModeVariationsParser.Data.map(row => row['MaxHealing']); }
    static GetCustomvalue1() { return GameModeVariationsParser.Data.map(row => row['CustomValue1']); }
    static GetPlayercollectbountystars() { return GameModeVariationsParser.Data.map(row => row['PlayerCollectBountyStars']); }
    static GetPlayerscollectpowercubes() { return GameModeVariationsParser.Data.map(row => row['PlayersCollectPowerCubes']); }
    static GetMaxpowercubestodrop() { return GameModeVariationsParser.Data.map(row => row['MaxPowerCubesToDrop']); }
    static GetPlayerscollectbolts() { return GameModeVariationsParser.Data.map(row => row['PlayersCollectBolts']); }
    static GetItemclaimdelayseconds() { return GameModeVariationsParser.Data.map(row => row['ItemClaimDelaySeconds']); }
    static GetIsplayedonverylargemap() { return GameModeVariationsParser.Data.map(row => row['IsPlayedOnVeryLargeMap']); }
    static GetSpectateaftergameover() { return GameModeVariationsParser.Data.map(row => row['SpectateAfterGameOver']); }
    static GetSpectateafterdeath() { return GameModeVariationsParser.Data.map(row => row['SpectateAfterDeath']); }
    static GetSpectatefriendafterdeath() { return GameModeVariationsParser.Data.map(row => row['SpectateFriendAfterDeath']); }
    static GetHascornerscorenumbers() { return GameModeVariationsParser.Data.map(row => row['HasCornerScoreNumbers']); }
    static GetHascornerscoreforbothteams() { return GameModeVariationsParser.Data.map(row => row['HasCornerScoreForBothTeams']); }
    static GetIsbattleroyale() { return GameModeVariationsParser.Data.map(row => row['IsBattleRoyale']); }
    static GetHasantiteamingfeatures() { return GameModeVariationsParser.Data.map(row => row['HasAntiTeamingFeatures']); }
    static GetHasboxeswithpowercubes() { return GameModeVariationsParser.Data.map(row => row['HasBoxesWithPowerCubes']); }
    static GetHasoffscreenindicator() { return GameModeVariationsParser.Data.map(row => row['HasOffScreenIndicator']); }
    static GetHasoffscreenbossindicator() { return GameModeVariationsParser.Data.map(row => row['HasOffScreenBossIndicator']); }
    static GetIscoop() { return GameModeVariationsParser.Data.map(row => row['IsCoop']); }
    static GetHasdownwardstickingclock() { return GameModeVariationsParser.Data.map(row => row['HasDownwardsTickingClock']); }
    static GetDisplayonehealthbar() { return GameModeVariationsParser.Data.map(row => row['DisplayOneHealthbar']); }
    static GetDisplayonehealthbarforbothteams() { return GameModeVariationsParser.Data.map(row => row['DisplayOneHealthbarForBothTeams']); }
    static GetDisplayonebluehealthbar() { return GameModeVariationsParser.Data.map(row => row['DisplayOneBlueHealthbar']); }
    static GetDisplayhealthbarforbothteams() { return GameModeVariationsParser.Data.map(row => row['DisplayHealthbarForBothTeams']); }
    static GetHealthbarsareinonecorner() { return GameModeVariationsParser.Data.map(row => row['HealthbarsAreInOneCorner']); }
    static GetHealthbarsfillup() { return GameModeVariationsParser.Data.map(row => row['HealthBarsFillUp']); }
    static GetHastwobases() { return GameModeVariationsParser.Data.map(row => row['HasTwoBases']); }
    static GetIssolomodewithrespawns() { return GameModeVariationsParser.Data.map(row => row['IsSoloModeWithRespawns']); }
    static GetIssolomode() { return GameModeVariationsParser.Data.map(row => row['IsSoloMode']); }
    static GetGetheroselectioncount() { return GameModeVariationsParser.Data.map(row => row['GetHeroSelectionCount']); }
    static GetHastimerandcanendbeforetimerrunsout() { return GameModeVariationsParser.Data.map(row => row['HasTimerAndCanEndBeforeTimerRunsOut']); }
    static GetShouldspawnclosetoteammate() { return GameModeVariationsParser.Data.map(row => row['ShouldSpawnCloseToTeammate']); }
    static GetHasspawnprotectioninthestart() { return GameModeVariationsParser.Data.map(row => row['HasSpawnProtectionInTheStart']); }
    static GetGivemvpatgameend() { return GameModeVariationsParser.Data.map(row => row['GiveMVPAtGameEnd']); }
    static GetHaswinbasedexp() { return GameModeVariationsParser.Data.map(row => row['HasWinBasedExp']); }
    static GetPancameratocenterwhengameover() { return GameModeVariationsParser.Data.map(row => row['PanCameraToCenterWhenGameOver']); }
    static GetRevealmapwhengameover() { return GameModeVariationsParser.Data.map(row => row['RevealMapWhenGameOver']); }
    static GetFlashhealthbar() { return GameModeVariationsParser.Data.map(row => row['FlashHealthBar']); }
    static GetIsgoalbasedmode() { return GameModeVariationsParser.Data.map(row => row['IsGoalBasedMode']); }
    static GetShowtextonscore() { return GameModeVariationsParser.Data.map(row => row['ShowTextOnScore']); }
    static GetModehascarryables() { return GameModeVariationsParser.Data.map(row => row['ModeHasCarryables']); }
    static GetAllowattackwhilecarrying() { return GameModeVariationsParser.Data.map(row => row['AllowAttackWhileCarrying']); }
    static GetIshorizontalmode() { return GameModeVariationsParser.Data.map(row => row['IsHorizontalMode']); }
    static GetBattleticks() { return GameModeVariationsParser.Data.map(row => row['BattleTicks']); }
    static GetHasovertime() { return GameModeVariationsParser.Data.map(row => row['HasOvertime']); }
    static GetOvertimehasgoldengoal() { return GameModeVariationsParser.Data.map(row => row['OvertimeHasGoldenGoal']); }
    static GetRespawnseconds() { return GameModeVariationsParser.Data.map(row => row['RespawnSeconds']); }
    static GetModehassecondaryrespawnpoints() { return GameModeVariationsParser.Data.map(row => row['ModeHasSecondaryRespawnPoints']); }
    static GetModegameobjectcount() { return GameModeVariationsParser.Data.map(row => row['ModeGameObjectCount']); }
    static GetRoundresetswhenobjectiveismissing() { return GameModeVariationsParser.Data.map(row => row['RoundResetsWhenObjectiveIsMissing']); }
    static GetDroppeditemondeath() { return GameModeVariationsParser.Data.map(row => row['DroppedItemOnDeath']); }
    static GetBotgoalareaeffect() { return GameModeVariationsParser.Data.map(row => row['BotGoalAreaEffect']); }
    static GetBotitempickup() { return GameModeVariationsParser.Data.map(row => row['BotItemPickup']); }
    static GetBotitempickup2() { return GameModeVariationsParser.Data.map(row => row['BotItemPickup2']); }
    static GetBotitempickupradius() { return GameModeVariationsParser.Data.map(row => row['BotItemPickupRadius']); }
    static GetHasteamitems() { return GameModeVariationsParser.Data.map(row => row['HasTeamItems']); }
    static GetPreventwallsonbase() { return GameModeVariationsParser.Data.map(row => row['PreventWallsOnBase']); }
    static GetHasmultipledifficulties() { return GameModeVariationsParser.Data.map(row => row['HasMultipleDifficulties']); }
    static GetIstypeofbossfight() { return GameModeVariationsParser.Data.map(row => row['IsTypeOfBossFight']); }
    static GetIsspecialevent() { return GameModeVariationsParser.Data.map(row => row['IsSpecialEvent']); }
    static GetIsblockedfromfriendlyroom() { return GameModeVariationsParser.Data.map(row => row['IsBlockedFromFriendlyRoom']); }
    static GetAreteamsdisabledin() { return GameModeVariationsParser.Data.map(row => row['AreTeamsDisabledIn']); }
    static GetBosscharacterdata() { return GameModeVariationsParser.Data.map(row => row['BossCharacterData']); }
    static GetBosscharacterdata2() { return GameModeVariationsParser.Data.map(row => row['BossCharacterData2']); }
    static GetBosscharacterdata3() { return GameModeVariationsParser.Data.map(row => row['BossCharacterData3']); }
    static GetBosssharehp() { return GameModeVariationsParser.Data.map(row => row['BossShareHP']); }
    static GetNumberofrounds() { return GameModeVariationsParser.Data.map(row => row['NumberOfRounds']); }
    static GetMovedeathnotificationsdown() { return GameModeVariationsParser.Data.map(row => row['MoveDeathNotificationsDown']); }
    static GetModecarryable() { return GameModeVariationsParser.Data.map(row => row['ModeCarryable']); }
    static GetTeamsize() { return GameModeVariationsParser.Data.map(row => row['TeamSize']); }
    static GetTeamcount() { return GameModeVariationsParser.Data.map(row => row['TeamCount']); }
    static GetModehasfillingpoison() { return GameModeVariationsParser.Data.map(row => row['ModeHasFillingPoison']); }
    static GetBattleload() { return GameModeVariationsParser.Data.map(row => row['BattleLoad']); }
    static GetBattleloadcoop() { return GameModeVariationsParser.Data.map(row => row['BattleLoadCoop']); }
    static GetHastokenstohold() { return GameModeVariationsParser.Data.map(row => row['HasTokensToHold']); }
    static GetIsmatchmakingbasedonaverageheroscore() { return GameModeVariationsParser.Data.map(row => row['IsMatchmakingBasedOnAverageHeroScore']); }
    static GetIsnotrewardingtrophies() { return GameModeVariationsParser.Data.map(row => row['IsNotRewardingTrophies']); }
    static GetIsallowduplicateheroes() { return GameModeVariationsParser.Data.map(row => row['IsAllowDuplicateHeroes']); }
    static GetTrophygainedmultiplierpercent() { return GameModeVariationsParser.Data.map(row => row['TrophyGainedMultiplierPercent']); }
    static GetTrophylostmultiplierpercent() { return GameModeVariationsParser.Data.map(row => row['TrophyLostMultiplierPercent']); }
    static GetBattlemusicoverride() { return GameModeVariationsParser.Data.map(row => row['BattleMusicOverride']); }
}

export default GameModeVariationsParser;
