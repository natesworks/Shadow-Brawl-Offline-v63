class ProjectilesParser {
    static Data: any[] = [];

    static Init(csvData: any[]) {
        ProjectilesParser.Data = csvData;
    }
    static GetName() { return ProjectilesParser.Data.map(row => row['Name']); }
    static GetParentprojectileforskin() { return ProjectilesParser.Data.map(row => row['ParentProjectileForSkin']); }
    static GetDisabled() { return ProjectilesParser.Data.map(row => row['Disabled']); }
    static GetSpeed() { return ProjectilesParser.Data.map(row => row['Speed']); }
    static GetFilename() { return ProjectilesParser.Data.map(row => row['FileName']); }
    static GetBluescw() { return ProjectilesParser.Data.map(row => row['BlueSCW']); }
    static GetRedscw() { return ProjectilesParser.Data.map(row => row['RedSCW']); }
    static GetBlueexportname() { return ProjectilesParser.Data.map(row => row['BlueExportName']); }
    static GetRedexportname() { return ProjectilesParser.Data.map(row => row['RedExportName']); }
    static GetShadowexportname() { return ProjectilesParser.Data.map(row => row['ShadowExportName']); }
    static GetBluegroundglowexportname() { return ProjectilesParser.Data.map(row => row['BlueGroundGlowExportName']); }
    static GetRedgroundglowexportname() { return ProjectilesParser.Data.map(row => row['RedGroundGlowExportName']); }
    static GetPreexplosionexportfilename() { return ProjectilesParser.Data.map(row => row['PreExplosionExportFileName']); }
    static GetPreexplosionblueexportname() { return ProjectilesParser.Data.map(row => row['PreExplosionBlueExportName']); }
    static GetPreexplosionredexportname() { return ProjectilesParser.Data.map(row => row['PreExplosionRedExportName']); }
    static GetPreexplosiontimems() { return ProjectilesParser.Data.map(row => row['PreExplosionTimeMs']); }
    static GetPreexplosionscale() { return ProjectilesParser.Data.map(row => row['PreExplosionScale']); }
    static GetHiteffectenv() { return ProjectilesParser.Data.map(row => row['HitEffectEnv']); }
    static GetHiteffectchar() { return ProjectilesParser.Data.map(row => row['HitEffectChar']); }
    static GetMaxrangereachedeffect() { return ProjectilesParser.Data.map(row => row['MaxRangeReachedEffect']); }
    static GetCanceleffect() { return ProjectilesParser.Data.map(row => row['CancelEffect']); }
    static GetRadius() { return ProjectilesParser.Data.map(row => row['Radius']); }
    static GetIgnoreclosewalls() { return ProjectilesParser.Data.map(row => row['IgnoreCloseWalls']); }
    static GetIndirect() { return ProjectilesParser.Data.map(row => row['Indirect']); }
    static GetConstantflytime() { return ProjectilesParser.Data.map(row => row['ConstantFlyTime']); }
    static GetTriggerwithdelayms() { return ProjectilesParser.Data.map(row => row['TriggerWithDelayMs']); }
    static GetBouncepercent() { return ProjectilesParser.Data.map(row => row['BouncePercent']); }
    static GetGravity() { return ProjectilesParser.Data.map(row => row['Gravity']); }
    static GetEarlyticks() { return ProjectilesParser.Data.map(row => row['EarlyTicks']); }
    static GetHidetime() { return ProjectilesParser.Data.map(row => row['HideTime']); }
    static GetScale() { return ProjectilesParser.Data.map(row => row['Scale']); }
    static GetRandomstartframe() { return ProjectilesParser.Data.map(row => row['RandomStartFrame']); }
    static GetStatuseffectally() { return ProjectilesParser.Data.map(row => row['StatusEffectAlly']); }
    static GetStatuseffectenemy() { return ProjectilesParser.Data.map(row => row['StatusEffectEnemy']); }
    static GetStatuseffectselfonhit() { return ProjectilesParser.Data.map(row => row['StatusEffectSelfOnHit']); }
    static GetSpawnareaeffectobject() { return ProjectilesParser.Data.map(row => row['SpawnAreaEffectObject']); }
    static GetSpawnareaeffectobject2() { return ProjectilesParser.Data.map(row => row['SpawnAreaEffectObject2']); }
    static GetSpawnareaeffectobjectsadditional() { return ProjectilesParser.Data.map(row => row['SpawnAreaEffectObjectsAdditional']); }
    static GetAreaeffect2damagepercent() { return ProjectilesParser.Data.map(row => row['AreaEffect2DamagePercent']); }
    static GetSpawncharacter() { return ProjectilesParser.Data.map(row => row['SpawnCharacter']); }
    static GetSpawnitem() { return ProjectilesParser.Data.map(row => row['SpawnItem']); }
    static GetSpawnareaeffecttrail() { return ProjectilesParser.Data.map(row => row['SpawnAreaEffectTrail']); }
    static GetAreaeffecttrailmindistance() { return ProjectilesParser.Data.map(row => row['AreaEffectTrailMinDistance']); }
    static GetTraileffect() { return ProjectilesParser.Data.map(row => row['TrailEffect']); }
    static GetSpecialtraileffect() { return ProjectilesParser.Data.map(row => row['SpecialTrailEffect']); }
    static GetSpecialtraileffect2() { return ProjectilesParser.Data.map(row => row['SpecialTrailEffect2']); }
    static GetTrailbehaviortype() { return ProjectilesParser.Data.map(row => row['TrailBehaviorType']); }
    static GetShotbyhero() { return ProjectilesParser.Data.map(row => row['ShotByHero']); }
    static GetIsbeam() { return ProjectilesParser.Data.map(row => row['IsBeam']); }
    static GetIsbouncing() { return ProjectilesParser.Data.map(row => row['IsBouncing']); }
    static GetDistanceaddfrombounce() { return ProjectilesParser.Data.map(row => row['DistanceAddFromBounce']); }
    static GetMaxdistancebounces() { return ProjectilesParser.Data.map(row => row['MaxDistanceBounces']); }
    static GetRendering() { return ProjectilesParser.Data.map(row => row['Rendering']); }
    static GetPiercescharacters() { return ProjectilesParser.Data.map(row => row['PiercesCharacters']); }
    static GetPiercesenvironment() { return ProjectilesParser.Data.map(row => row['PiercesEnvironment']); }
    static GetPiercesenvironmentlikebutter() { return ProjectilesParser.Data.map(row => row['PiercesEnvironmentLikeButter']); }
    static GetPushbackstrength() { return ProjectilesParser.Data.map(row => row['PushbackStrength']); }
    static GetPushbacktype() { return ProjectilesParser.Data.map(row => row['PushbackType']); }
    static GetChainstoenemies() { return ProjectilesParser.Data.map(row => row['ChainsToEnemies']); }
    static GetChainbullets() { return ProjectilesParser.Data.map(row => row['ChainBullets']); }
    static GetChainbulletsmax() { return ProjectilesParser.Data.map(row => row['ChainBulletsMax']); }
    static GetChainspread() { return ProjectilesParser.Data.map(row => row['ChainSpread']); }
    static GetChaintraveldistance() { return ProjectilesParser.Data.map(row => row['ChainTravelDistance']); }
    static GetChainbullet() { return ProjectilesParser.Data.map(row => row['ChainBullet']); }
    static GetExecutechainspecialcase() { return ProjectilesParser.Data.map(row => row['ExecuteChainSpecialCase']); }
    static GetAnimatebydistancetravelled() { return ProjectilesParser.Data.map(row => row['AnimateByDistanceTravelled']); }
    static GetDamagepercentstart() { return ProjectilesParser.Data.map(row => row['DamagePercentStart']); }
    static GetDamagepercentend() { return ProjectilesParser.Data.map(row => row['DamagePercentEnd']); }
    static GetDamagechangestartpromille() { return ProjectilesParser.Data.map(row => row['DamageChangeStartPromille']); }
    static GetDamagechangeendpromille() { return ProjectilesParser.Data.map(row => row['DamageChangeEndPromille']); }
    static GetIgnoredamagechangeforulticharge() { return ProjectilesParser.Data.map(row => row['IgnoreDamageChangeForUltiCharge']); }
    static GetDamagesconstantlytickdelay() { return ProjectilesParser.Data.map(row => row['DamagesConstantlyTickDelay']); }
    static GetFreezestrength() { return ProjectilesParser.Data.map(row => row['FreezeStrength']); }
    static GetFreezedurationms() { return ProjectilesParser.Data.map(row => row['FreezeDurationMS']); }
    static GetStunlengthms() { return ProjectilesParser.Data.map(row => row['StunLengthMS']); }
    static GetPartialstunpromille() { return ProjectilesParser.Data.map(row => row['PartialStunPromille']); }
    static GetSilencedurationms() { return ProjectilesParser.Data.map(row => row['SilenceDurationMS']); }
    static GetScalestart() { return ProjectilesParser.Data.map(row => row['ScaleStart']); }
    static GetScaleend() { return ProjectilesParser.Data.map(row => row['ScaleEnd']); }
    static GetAttractspet() { return ProjectilesParser.Data.map(row => row['AttractsPet']); }
    static GetLifestealpercent() { return ProjectilesParser.Data.map(row => row['LifeStealPercent']); }
    static GetPassesenvironment() { return ProjectilesParser.Data.map(row => row['PassesEnvironment']); }
    static GetSuppresshealing() { return ProjectilesParser.Data.map(row => row['SuppressHealing']); }
    static GetSuppresshealingticks() { return ProjectilesParser.Data.map(row => row['SuppressHealingTicks']); }
    static GetConsumableshield() { return ProjectilesParser.Data.map(row => row['ConsumableShield']); }
    static GetConsumableshieldticks() { return ProjectilesParser.Data.map(row => row['ConsumableShieldTicks']); }
    static GetDamageonlywithoneproj() { return ProjectilesParser.Data.map(row => row['DamageOnlyWithOneProj']); }
    static GetHealownpercent() { return ProjectilesParser.Data.map(row => row['HealOwnPercent']); }
    static GetSpecialvisualstate() { return ProjectilesParser.Data.map(row => row['SpecialVisualState']); }
    static GetHidefaster() { return ProjectilesParser.Data.map(row => row['HideFaster']); }
    static GetGrapplesenemy() { return ProjectilesParser.Data.map(row => row['GrapplesEnemy']); }
    static GetKickback() { return ProjectilesParser.Data.map(row => row['KickBack']); }
    static GetUsecolormod() { return ProjectilesParser.Data.map(row => row['UseColorMod']); }
    static GetRedadd() { return ProjectilesParser.Data.map(row => row['RedAdd']); }
    static GetGreenadd() { return ProjectilesParser.Data.map(row => row['GreenAdd']); }
    static GetBlueadd() { return ProjectilesParser.Data.map(row => row['BlueAdd']); }
    static GetRedmul() { return ProjectilesParser.Data.map(row => row['RedMul']); }
    static GetGreenmul() { return ProjectilesParser.Data.map(row => row['GreenMul']); }
    static GetBluemul() { return ProjectilesParser.Data.map(row => row['BlueMul']); }
    static GetGroundbasis() { return ProjectilesParser.Data.map(row => row['GroundBasis']); }
    static GetMindistanceforspread() { return ProjectilesParser.Data.map(row => row['MinDistanceForSpread']); }
    static GetIsfriendlyhomingmissile() { return ProjectilesParser.Data.map(row => row['IsFriendlyHomingMissile']); }
    static GetBoomerangtype() { return ProjectilesParser.Data.map(row => row['BoomerangType']); }
    static GetCanhitagainafterbounce() { return ProjectilesParser.Data.map(row => row['CanHitAgainAfterBounce']); }
    static GetIshomingmissile() { return ProjectilesParser.Data.map(row => row['IsHomingMissile']); }
    static GetUltichargechangepercent() { return ProjectilesParser.Data.map(row => row['UltiChargeChangePercent']); }
    static GetAppliedeffectvisualtype() { return ProjectilesParser.Data.map(row => row['AppliedEffectVisualType']); }
    static GetTraveltype() { return ProjectilesParser.Data.map(row => row['TravelType']); }
    static GetTraveltypevariable() { return ProjectilesParser.Data.map(row => row['TravelTypeVariable']); }
    static GetTraveltypevariable2() { return ProjectilesParser.Data.map(row => row['TravelTypeVariable2']); }
    static GetIgnorelevelborder() { return ProjectilesParser.Data.map(row => row['IgnoreLevelBorder']); }
    static GetSteerstrength() { return ProjectilesParser.Data.map(row => row['SteerStrength']); }
    static GetSteerignoreticks() { return ProjectilesParser.Data.map(row => row['SteerIgnoreTicks']); }
    static GetHomedistance() { return ProjectilesParser.Data.map(row => row['HomeDistance']); }
    static GetSteerlifetime() { return ProjectilesParser.Data.map(row => row['SteerLifeTime']); }
    static GetVisualizeendpoint() { return ProjectilesParser.Data.map(row => row['VisualizeEndPoint']); }
    static GetDonotforceshow() { return ProjectilesParser.Data.map(row => row['DoNotForceShow']); }
    static GetUniqueproperty() { return ProjectilesParser.Data.map(row => row['UniqueProperty']); }
    static GetCustomuniquepropertyvalue() { return ProjectilesParser.Data.map(row => row['CustomUniquePropertyValue']); }
    static GetCustomobject() { return ProjectilesParser.Data.map(row => row['CustomObject']); }
    static GetCustomobject2() { return ProjectilesParser.Data.map(row => row['CustomObject2']); }
    static GetZoffset() { return ProjectilesParser.Data.map(row => row['Zoffset']); }
}

export default ProjectilesParser;
